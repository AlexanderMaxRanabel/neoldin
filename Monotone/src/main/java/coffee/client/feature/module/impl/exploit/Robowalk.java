/*
 * Copyright (c) 2022 Coffee Client, 0x150 and contributors.
 * Some rights reserved, refer to LICENSE file.
 */

package coffee.client.feature.module.impl.exploit;

import coffee.client.feature.module.Module;
import coffee.client.feature.module.ModuleType;
import coffee.client.helper.event.EventListener;
import coffee.client.helper.event.EventType;
import coffee.client.helper.event.events.PacketEvent;
import coffee.client.mixin.network.IPlayerMoveC2SPacketMixin;
import coffee.client.mixin.network.IVehicleMoveC2SPacketMixin;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.entity.Entity;
import net.minecraft.network.Packet;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.c2s.play.VehicleMoveC2SPacket;

public class Robowalk extends Module {
    public Robowalk() {
        super("Robowalk", "Bypass liveoverflow's bot detection", ModuleType.EXPLOIT);
    }

    @Override
    public void tick() {

    }

    @Override
    public void enable() {

    }

    @Override
    public void disable() {

    }

    @Override
    public String getContext() {
        return null;
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {

    }

    @EventListener(EventType.PACKET_SEND)
    void onPacket(PacketEvent pe) {
        Packet<?> rawpacket = pe.getPacket();
        if (rawpacket instanceof PlayerMoveC2SPacket packet) {
            if (packet instanceof PlayerMoveC2SPacket.PositionAndOnGround || packet instanceof PlayerMoveC2SPacket.Full) {
                IPlayerMoveC2SPacketMixin accessor = (IPlayerMoveC2SPacketMixin) packet;
                double x = Math.round(packet.getX(0) * 100.0) / 100.0; //round packets as best we can
                double z = Math.round(packet.getZ(0) * 100.0) / 100.0;

                long dx = ((long) (x * 1000)) % 10; //simulate the check that liveoverflow runs
                long dz = ((long) (z * 1000)) % 10;

                if (dx != 0 || dz != 0) {
                    pe.setCancelled(true);
                    return;
                }

                accessor.setX(x);
                accessor.setZ(z);
            }
        }
        if (rawpacket instanceof VehicleMoveC2SPacket packet) {
            double x = Math.round(packet.getX() * 100.0) / 100.0; //round packets as best we can
            double z = Math.round(packet.getZ() * 100.0) / 100.0;

            long dx = ((long) (x * 1000)) % 10; //simulate the check that liveoverflow runs
            long dz = ((long) (z * 1000)) % 10;

            if (dx != 0 || dz != 0) {
                pe.setCancelled(true);
                return;
            }

            Entity vehicle = client.player.getVehicle();

            vehicle.setPos(x, packet.getY(), z);

            IVehicleMoveC2SPacketMixin packet1 = (IVehicleMoveC2SPacketMixin) packet;
            packet1.setX(x);
            packet1.setZ(z);
        }
    }

    @Override
    public void onHudRender() {

    }
}
